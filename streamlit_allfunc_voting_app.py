import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime
import hashlib
import json
import sqlite3
from pathlib import Path
import os

# „Éö„Éº„Ç∏Ë®≠ÂÆö
st.set_page_config(
    page_title="ÂõΩÊ∞ëÊäïÁ•®„Ç∑„Çπ„ÉÜ„É†",
    page_icon="üó≥Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# „Ç´„Çπ„Çø„É†CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #4F46E5;
        text-align: center;
        padding: 1rem 0;
    }
    .success-box {
        padding: 1rem;
        background-color: #D1FAE5;
        border-left: 4px solid #10B981;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .info-box {
        padding: 1rem;
        background-color: #DBEAFE;
        border-left: 4px solid #3B82F6;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .warning-box {
        padding: 1rem;
        background-color: #FEF3C7;
        border-left: 4px solid #F59E0B;
        border-radius: 0.5rem;
        margin: 1rem 0;
    }
    .admin-badge {
        background-color: #A855F7;
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.875rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# =============================================
# „Éá„Éº„Çø„Éô„Éº„Çπ„ÇØ„É©„Çπ
# =============================================

class Database:
    def __init__(self, db_path="referendum_data.db"):
        self.db_path = db_path
        self.init_database()
    
    def get_connection(self):
        return sqlite3.connect(self.db_path, check_same_thread=False)
    
    def init_database(self):
        """„Éá„Éº„Çø„Éô„Éº„Çπ„Å®„ÉÜ„Éº„Éñ„É´„ÇíÂàùÊúüÂåñ"""
        conn = self.get_connection()
        cursor = conn.cursor()
        
        # „É¶„Éº„Ç∂„Éº„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id TEXT PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            name TEXT NOT NULL,
            voter_id TEXT UNIQUE NOT NULL,
            is_admin INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # ÊèêÊ°à„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS proposals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT NOT NULL,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            status TEXT DEFAULT 'active',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # ÊäïÁ•®„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS votes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            proposal_id INTEGER NOT NULL,
            voter_id TEXT NOT NULL,
            vote_type TEXT NOT NULL,
            voted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (proposal_id) REFERENCES proposals (id),
            UNIQUE(proposal_id, voter_id)
        )
        """)
        
        # „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS initiatives (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            required_signatures INTEGER NOT NULL,
            status TEXT DEFAULT 'collecting',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # ÁΩ≤Âêç„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS signatures (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            initiative_id INTEGER NOT NULL,
            voter_id TEXT NOT NULL,
            signed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (initiative_id) REFERENCES initiatives (id),
            UNIQUE(initiative_id, voter_id)
        )
        """)
        
        # Ë®≠ÂÆö„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÂ±•Ê≠¥„ÉÜ„Éº„Éñ„É´
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS fact_checks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT NOT NULL,
            query TEXT NOT NULL,
            answer TEXT NOT NULL,
            sources TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        # ÂàùÊúü„Éá„Éº„ÇøÊäïÂÖ•
        cursor.execute("SELECT COUNT(*) FROM proposals")
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
            INSERT INTO proposals (type, title, description) VALUES 
            ('referendum', 'Ê∂àË≤ªÁ®éÁéá„ÅÆÂºï„Åç‰∏ã„Åí', 'Ê∂àË≤ªÁ®éÁéá„Çí10%„Åã„Çâ8%„Å´Âºï„Åç‰∏ã„Åí„ÇãÊ≥ïÊ°à'),
            ('veto', 'Èò≤Ë°õË≤ªÂ¢óÈ°çÊ≥ïÊ°à„Å∏„ÅÆÊãíÂê¶Ê®©', 'ÊîøÂ∫ú„ÅåÊèêÊ°à„Åó„ÅüÈò≤Ë°õË≤ªÂ¢óÈ°çÊ≥ïÊ°à„Å´ÂØæ„Åô„ÇãÊãíÂê¶Ê®©Ë°å‰Ωø')
            """)
        
        cursor.execute("SELECT COUNT(*) FROM initiatives")
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
            INSERT INTO initiatives (title, description, required_signatures) VALUES 
            ('ÊúÄ‰ΩéË≥ÉÈáë„ÅÆÂºï„Åç‰∏ä„Åí', 'ÂÖ®ÂõΩ‰∏ÄÂæã„ÅßÊúÄ‰ΩéË≥ÉÈáë„Çí1,500ÂÜÜ„Å´Âºï„Åç‰∏ä„Åí„Çã', 10000)
            """)
            # ÂàùÊúüÁΩ≤Âêç„Éá„Éº„Çø
            for i in range(8500):
                cursor.execute("""
                INSERT INTO signatures (initiative_id, voter_id) VALUES (1, ?)
                """, (f"initial_voter_{i}",))
        
        cursor.execute("SELECT COUNT(*) FROM settings WHERE key='required_signatures'")
        if cursor.fetchone()[0] == 0:
            cursor.execute("""
            INSERT INTO settings (key, value) VALUES ('required_signatures', '10000')
            """)
        
        conn.commit()
        conn.close()
    
    # „É¶„Éº„Ç∂„ÉºÈñ¢ÈÄ£
    def create_or_update_user(self, google_id, email, name, voter_id, is_admin=False):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
        INSERT INTO users (id, email, name, voter_id, is_admin) 
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(id) DO UPDATE SET 
            email=excluded.email, 
            name=excluded.name,
            is_admin=excluded.is_admin
        """, (google_id, email, name, voter_id, 1 if is_admin else 0))
        
        conn.commit()
        user = self.get_user_by_id(google_id)
        conn.close()
        return user
    
    def get_user_by_id(self, user_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            return {
                'id': row[0],
                'email': row[1],
                'name': row[2],
                'voter_id': row[3],
                'is_admin': bool(row[4])
            }
        return None
    
    # ÊèêÊ°àÈñ¢ÈÄ£
    def get_all_proposals(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM proposals ORDER BY created_at DESC")
        rows = cursor.fetchall()
        conn.close()
        
        proposals = []
        for row in rows:
            proposal = {
                'id': row[0],
                'type': row[1],
                'title': row[2],
                'description': row[3],
                'status': row[4],
                'votes': self.get_vote_counts(row[0])
            }
            proposals.append(proposal)
        return proposals
    
    def get_vote_counts(self, proposal_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        SELECT vote_type, COUNT(*) FROM votes 
        WHERE proposal_id=? 
        GROUP BY vote_type
        """, (proposal_id,))
        rows = cursor.fetchall()
        
        cursor.execute("SELECT type FROM proposals WHERE id=?", (proposal_id,))
        proposal_type = cursor.fetchone()[0]
        conn.close()
        
        if proposal_type == 'referendum':
            votes = {'agree': 0, 'disagree': 0}
        else:
            votes = {'veto': 0, 'approve': 0}
        
        for row in rows:
            votes[row[0]] = row[1]
        
        return votes
    
    def cast_vote(self, proposal_id, voter_id, vote_type):
        conn = self.get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("""
            INSERT INTO votes (proposal_id, voter_id, vote_type) 
            VALUES (?, ?, ?)
            """, (proposal_id, voter_id, vote_type))
            conn.commit()
            conn.close()
            return True
        except sqlite3.IntegrityError:
            conn.close()
            return False
    
    def has_voted(self, proposal_id, voter_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        SELECT COUNT(*) FROM votes 
        WHERE proposal_id=? AND voter_id=?
        """, (proposal_id, voter_id))
        count = cursor.fetchone()[0]
        conn.close()
        return count > 0
    
    # „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„ÉñÈñ¢ÈÄ£
    def get_all_initiatives(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM initiatives ORDER BY created_at DESC")
        rows = cursor.fetchall()
        conn.close()
        
        initiatives = []
        for row in rows:
            initiative = {
                'id': row[0],
                'title': row[1],
                'description': row[2],
                'required': row[3],
                'status': row[4],
                'signatures': self.get_signature_count(row[0])
            }
            initiatives.append(initiative)
        return initiatives
    
    def get_signature_count(self, initiative_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        SELECT COUNT(*) FROM signatures WHERE initiative_id=?
        """, (initiative_id,))
        count = cursor.fetchone()[0]
        conn.close()
        return count
    
    def sign_initiative(self, initiative_id, voter_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute("""
            INSERT INTO signatures (initiative_id, voter_id) 
            VALUES (?, ?)
            """, (initiative_id, voter_id))
            conn.commit()
            
            signatures = self.get_signature_count(initiative_id)
            cursor.execute("SELECT required_signatures FROM initiatives WHERE id=?", (initiative_id,))
            required = cursor.fetchone()[0]
            
            if signatures >= required:
                cursor.execute("""
                UPDATE initiatives SET status='qualified' WHERE id=?
                """, (initiative_id,))
                conn.commit()
                
                cursor.execute("SELECT title, description FROM initiatives WHERE id=?", (initiative_id,))
                title, description = cursor.fetchone()
                cursor.execute("""
                INSERT INTO proposals (type, title, description) 
                VALUES ('referendum', ?, ?)
                """, (title, description + ' („Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Åã„Çâ)'))
                conn.commit()
                conn.close()
                return True, True
            
            conn.close()
            return True, False
        except sqlite3.IntegrityError:
            conn.close()
            return False, False
    
    def has_signed(self, initiative_id, voter_id):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        SELECT COUNT(*) FROM signatures 
        WHERE initiative_id=? AND voter_id=?
        """, (initiative_id, voter_id))
        count = cursor.fetchone()[0]
        conn.close()
        return count > 0
    
    def create_initiative(self, title, description, voter_id):
        required = self.get_setting('required_signatures', 10000)
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO initiatives (title, description, required_signatures) 
        VALUES (?, ?, ?)
        """, (title, description, required))
        initiative_id = cursor.lastrowid
        
        cursor.execute("""
        INSERT INTO signatures (initiative_id, voter_id) VALUES (?, ?)
        """, (initiative_id, voter_id))
        
        conn.commit()
        conn.close()
        return initiative_id
    
    # Ë®≠ÂÆöÈñ¢ÈÄ£
    def get_setting(self, key, default=None):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT value FROM settings WHERE key=?", (key,))
        row = cursor.fetchone()
        conn.close()
        
        if row:
            try:
                return int(row[0])
            except:
                return row[0]
        return default
    
    def set_setting(self, key, value):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO settings (key, value) VALUES (?, ?)
        ON CONFLICT(key) DO UPDATE SET value=excluded.value, updated_at=CURRENT_TIMESTAMP
        """, (key, str(value)))
        conn.commit()
        conn.close()
    
    # „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØÈñ¢ÈÄ£
    def save_fact_check(self, user_id, query, answer, sources):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        INSERT INTO fact_checks (user_id, query, answer, sources) 
        VALUES (?, ?, ?, ?)
        """, (user_id, query, answer, json.dumps(sources)))
        conn.commit()
        conn.close()
    
    def get_fact_check_history(self, user_id, limit=5):
        conn = self.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
        SELECT query, answer, sources, created_at 
        FROM fact_checks 
        WHERE user_id=? 
        ORDER BY created_at DESC 
        LIMIT ?
        """, (user_id, limit))
        rows = cursor.fetchall()
        conn.close()
        
        history = []
        for row in rows:
            history.append({
                'query': row[0],
                'answer': row[1],
                'sources': json.loads(row[2]),
                'timestamp': datetime.fromisoformat(row[3])
            })
        return history
    
    # Áµ±Ë®àÊÉÖÂ†±
    def get_statistics(self):
        conn = self.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT COUNT(*) FROM proposals WHERE type='referendum'")
        referendum_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM proposals WHERE type='veto'")
        veto_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM initiatives")
        initiative_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM initiatives WHERE status='collecting'")
        collecting_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM initiatives WHERE status='qualified'")
        qualified_count = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'referendum': referendum_count,
            'veto': veto_count,
            'initiatives': initiative_count,
            'collecting': collecting_count,
            'qualified': qualified_count
        }

# „Éá„Éº„Çø„Éô„Éº„Çπ„Ç§„É≥„Çπ„Çø„É≥„Çπ
db = Database()

# =============================================
# „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
# =============================================

def generate_voter_id(google_id):
    """ÂåøÂêçÊäïÁ•®ËÄÖID„ÇíÁîüÊàê"""
    return hashlib.sha256(f"{google_id}_{datetime.now().date().isoformat()}".encode()).hexdigest()[:16]

def get_fact_check_response(query):
    """„Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ"""
    mock_responses = {
        'Ê∂àË≤ªÁ®é': {
            'answer': 'Ê∂àË≤ªÁ®éÁéá10%„ÅØ2019Âπ¥10Êúà„Å´Â∞éÂÖ•„Åï„Çå„Åæ„Åó„Åü„ÄÇËªΩÊ∏õÁ®éÁéá„Å´„Çà„ÇäÈ£üÂìÅÁ≠â„ÅØ8%„ÅåÁ∂≠ÊåÅ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
            'sources': ['Ë≤°ÂãôÁúÅ', 'ÂõΩÁ®éÂ∫Å']
        },
        'Èò≤Ë°õË≤ª': {
            'answer': '2024Âπ¥Â∫¶„ÅÆÈò≤Ë°õË≤ª„ÅØÁ¥Ñ7.9ÂÖÜÂÜÜ„Åß„ÄÅGDPÊØîÁ¥Ñ1.6%„Å®„Å™„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
            'sources': ['Èò≤Ë°õÁúÅ', 'Ë≤°ÂãôÁúÅ']
        },
        'ÊúÄ‰ΩéË≥ÉÈáë': {
            'answer': '2024Âπ¥Â∫¶„ÅÆÂÖ®ÂõΩÂä†ÈáçÂπ≥ÂùáÊúÄ‰ΩéË≥ÉÈáë„ÅØ1,054ÂÜÜ„Åß„Åô„ÄÇÈÉΩÈÅìÂ∫úÁúå„Å´„Çà„ÇäÁï∞„Å™„Çä„Åæ„Åô„ÄÇ',
            'sources': ['ÂéöÁîüÂä¥ÂÉçÁúÅ']
        }
    }
    
    for key, response in mock_responses.items():
        if key in query:
            return response
    
    return {
        'answer': '„ÅîË≥™Âïè„ÅÆÂÜÖÂÆπ„Å´„Å§„ÅÑ„Å¶„ÄÅÂÖ¨ÁöÑÊ©üÈñ¢„ÅÆ„Éá„Éº„Çø„Å´Âü∫„Å•„ÅÑ„Å¶ÂõûÁ≠î„Åó„Åæ„Åô„ÄÇË©≥Á¥∞„Å™ÊÉÖÂ†±Ê∫ê„ÇÇ„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ',
        'sources': ['Á∑èÂãôÁúÅÁµ±Ë®àÂ±Ä', 'ÂÜÖÈñ£Â∫ú']
    }

# =============================================
# „Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
# =============================================

if 'user' not in st.session_state:
    st.session_state.user = None

# =============================================
# „É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
# =============================================

if not st.session_state.user:
    st.markdown('<div class="main-header">üó≥Ô∏è ÂõΩÊ∞ëÊäïÁ•®„Ç∑„Çπ„ÉÜ„É†</div>', unsafe_allow_html=True)
    st.markdown("### Ê∞ë‰∏ª‰∏ªÁæ©„ÇíÂÆüË∑µ„Åô„Çã„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†")
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("---")
        
        st.markdown("""
        <div class="info-box">
            <h4>üîê „É≠„Ç∞„Ç§„É≥</h4>
            <p>Êú¨Áï™Áí∞Â¢É„Åß„ÅØGoogle OAuth 2.0„Å´„Çà„ÇãË™çË®º„ÇíÂÆüË£Ö„Åó„Åæ„Åô</p>
        </div>
        """, unsafe_allow_html=True)
        
        with st.expander("üìù „É≠„Ç∞„Ç§„É≥", expanded=True):
            email = st.text_input("„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ", placeholder="example@email.com")
            name = st.text_input("„É¶„Éº„Ç∂„ÉºÂêç", placeholder="ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                if st.button("üîê „É≠„Ç∞„Ç§„É≥", use_container_width=True, type="primary"):
                    if email and name:
                        google_id = hashlib.md5(email.encode()).hexdigest()
                        voter_id = generate_voter_id(google_id)
                        user = db.create_or_update_user(google_id, email, name, voter_id)
                        st.session_state.user = user
                        st.rerun()
                    else:
                        st.error("„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å®„É¶„Éº„Ç∂„ÉºÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            
            with col_btn2:
                if st.button("üëë ÁÆ°ÁêÜËÄÖ", use_container_width=True):
                    google_id = 'admin_001'
                    voter_id = generate_voter_id(google_id)
                    user = db.create_or_update_user(google_id, 'admin@example.com', 'ÁÆ°ÁêÜËÄÖ', voter_id, is_admin=True)
                    st.session_state.user = user
                    st.rerun()
        
        st.markdown("---")
        
        st.markdown("""
        <div class="info-box">
            <h4>‚ú® „Ç∑„Çπ„ÉÜ„É†„ÅÆÁâπÂæ¥</h4>
            <ul>
                <li>üîí OAuth 2.0„Å´„Çà„ÇãÂÆâÂÖ®„Å™Ë™çË®º</li>
                <li>üíæ SQLite„Å´„Çà„Çã„Éá„Éº„ÇøÊ∞∏Á∂öÂåñ</li>
                <li>üîê ÁÑ°Ë®òÂêçÊäïÁ•®„ÅßÂåøÂêçÊÄß„Çí‰øùË®º</li>
                <li>‚úÖ ‰∫åÈáçÊäïÁ•®„Éª‰∫åÈáçÁΩ≤ÂêçÈò≤Ê≠¢</li>
                <li>üìä „É™„Ç¢„É´„Çø„Ç§„É†ÈõÜË®àË°®Á§∫</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)

else:
    # „Éò„ÉÉ„ÉÄ„Éº
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown('<div class="main-header">üó≥Ô∏è ÂõΩÊ∞ëÊäïÁ•®„Ç∑„Çπ„ÉÜ„É†</div>', unsafe_allow_html=True)
    with col2:
        st.markdown(f"**{st.session_state.user['name']}**")
        if st.session_state.user['is_admin']:
            st.markdown('<span class="admin-badge">üëë ÁÆ°ÁêÜËÄÖ</span>', unsafe_allow_html=True)
        if st.button("„É≠„Ç∞„Ç¢„Ç¶„Éà", use_container_width=True):
            st.session_state.user = None
            st.rerun()
    
    st.markdown("---")
    
    # „Çø„Éñ
    tabs = ["üìã „É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†", "üö´ ÊãíÂê¶Ê®©ÊäïÁ•®", "‚úçÔ∏è „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ", "üîç „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ"]
    if st.session_state.user['is_admin']:
        tabs.append("‚öôÔ∏è ÁÆ°ÁêÜËÄÖ")
    
    tab_objects = st.tabs(tabs)
    
    # „É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†„Çø„Éñ
    with tab_objects[0]:
        st.header("üìã ÂõΩÊ∞ëÊäïÁ•®Ôºà„É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†Ôºâ")
        proposals = db.get_all_proposals()
        referendum_proposals = [p for p in proposals if p['type'] == 'referendum']
        
        if not referendum_proposals:
            st.info("ÁèæÂú®ÈÄ≤Ë°å‰∏≠„ÅÆ„É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì")
        
        for proposal in referendum_proposals:
            with st.container():
                st.subheader(proposal['title'])
                st.write(proposal['description'])
                
                votes_data = pd.DataFrame({
                    'ÈÅ∏ÊäûËÇ¢': ['Ë≥õÊàê', 'ÂèçÂØæ'],
                    'Á•®Êï∞': [proposal['votes']['agree'], proposal['votes']['disagree']]
                })
                
                fig = px.bar(votes_data, x='ÈÅ∏ÊäûËÇ¢', y='Á•®Êï∞', 
                            color='ÈÅ∏ÊäûËÇ¢',
                            color_discrete_map={'Ë≥õÊàê': '#10B981', 'ÂèçÂØæ': '#EF4444'})
                fig.update_layout(showlegend=False, height=300)
                st.plotly_chart(fig, use_container_width=True)
                
                if db.has_voted(proposal['id'], st.session_state.user['voter_id']):
                    st.success("‚úÖ ÊäïÁ•®Ê∏à„Åø")
                else:
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"üëç Ë≥õÊàê ({proposal['votes']['agree']})", 
                                   key=f"agree_{proposal['id']}", 
                                   use_container_width=True):
                            if db.cast_vote(proposal['id'], st.session_state.user['voter_id'], 'agree'):
                                st.success("‚úÖ ÊäïÁ•®ÂÆå‰∫Ü")
                                st.rerun()
                    with col2:
                        if st.button(f"üëé ÂèçÂØæ ({proposal['votes']['disagree']})", 
                                   key=f"disagree_{proposal['id']}", 
                                   use_container_width=True):
                            if db.cast_vote(proposal['id'], st.session_state.user['voter_id'], 'disagree'):
                                st.success("‚úÖ ÊäïÁ•®ÂÆå‰∫Ü")
                                st.rerun()
                
                st.markdown("---")
    
    # ÊãíÂê¶Ê®©ÊäïÁ•®„Çø„Éñ
    with tab_objects[1]:
        st.header("üö´ ÊãíÂê¶Ê®©Ë°å‰ΩøÊäïÁ•®")
        proposals = db.get_all_proposals()
        veto_proposals = [p for p in proposals if p['type'] == 'veto']
        
        if not veto_proposals:
            st.info("ÁèæÂú®ÈÄ≤Ë°å‰∏≠„ÅÆÊãíÂê¶Ê®©ÊäïÁ•®„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì")
        
        for proposal in veto_proposals:
            with st.container():
                st.subheader(proposal['title'])
                st.write(proposal['description'])
                
                votes_data = pd.DataFrame({
                    'ÈÅ∏ÊäûËÇ¢': ['ÊãíÂê¶', 'ÊâøË™ç'],
                    'Á•®Êï∞': [proposal['votes']['veto'], proposal['votes']['approve']]
                })
                
                fig = px.pie(votes_data, values='Á•®Êï∞', names='ÈÅ∏ÊäûËÇ¢',
                           color='ÈÅ∏ÊäûËÇ¢',
                           color_discrete_map={'ÊãíÂê¶': '#EF4444', 'ÊâøË™ç': '#3B82F6'})
                fig.update_layout(height=300)
                st.plotly_chart(fig, use_container_width=True)
                
                if db.has_voted(proposal['id'], st.session_state.user['voter_id']):
                    st.success("‚úÖ ÊäïÁ•®Ê∏à„Åø")
                else:
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button(f"üö´ ÊãíÂê¶ ({proposal['votes']['veto']})", 
                                   key=f"veto_{proposal['id']}", 
                                   use_container_width=True):
                            if db.cast_vote(proposal['id'], st.session_state.user['voter_id'], 'veto'):
                                st.success("‚úÖ ÊäïÁ•®ÂÆå‰∫Ü")
                                st.rerun()
                    with col2:
                        if st.button(f"‚úÖ ÊâøË™ç ({proposal['votes']['approve']})", 
                                   key=f"approve_{proposal['id']}", 
                                   use_container_width=True):
                            if db.cast_vote(proposal['id'], st.session_state.user['voter_id'], 'approve'):
                                st.success("‚úÖ ÊäïÁ•®ÂÆå‰∫Ü")
                                st.rerun()
                
                st.markdown("---")
    
    # „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Çø„Éñ
    with tab_objects[2]:
        st.header("‚úçÔ∏è „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„ÉñÔºàÂõΩÊ∞ëÁô∫Ë≠∞Ôºâ")
        
        with st.expander("‚ûï Êñ∞„Åó„ÅÑ„Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Çí‰ΩúÊàê", expanded=False):
            new_title = st.text_input("„Çø„Ç§„Éà„É´", key="new_init_title")
            new_desc = st.text_area("Ë©≥Á¥∞„Å™Ë™¨Êòé", key="new_init_desc", height=100)
            
            if st.button("„Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Çí‰ΩúÊàê", type="primary"):
                if new_title and new_desc:
                    db.create_initiative(new_title, new_desc, st.session_state.user['voter_id'])
                    st.success("‚úÖ „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü")
                    st.rerun()
                else:
                    st.error("„Çø„Ç§„Éà„É´„Å®Ë™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        st.markdown("---")
        
        initiatives = db.get_all_initiatives()
        for initiative in initiatives:
            with st.container():
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    st.subheader(initiative['title'])
                    st.write(initiative['description'])
                
                with col2:
                    if initiative['status'] == 'qualified':
                        st.success("‚úÖ ÊàêÁ´ã")
                    else:
                        st.warning("üìù ÂãüÈõÜ‰∏≠")
                
                progress = min(initiative['signatures'] / initiative['required'], 1.0)
                st.progress(progress)
                st.caption(f"ÈÄ≤Êçó: {initiative['signatures']} / {initiative['required']} ÁΩ≤Âêç ({progress*100:.1f}%)")
                
                if initiative['status'] == 'collecting':
                    if db.has_signed(initiative['id'], st.session_state.user['voter_id']):
                        st.success("‚úÖ ÁΩ≤ÂêçÊ∏à„Åø")
                    else:
                        if st.button(f"‚úçÔ∏è ÁΩ≤Âêç„Åô„Çã", key=f"sign_{initiative['id']}", 
                                   use_container_width=True, type="primary"):
                            success, qualified = db.sign_initiative(initiative['id'], st.session_state.user['voter_id'])
                            if success:
                                if qualified:
                                    st.balloons()
                                    st.success(f"üéâ „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„Äå{initiative['title']}„Äç„ÅåÊàêÁ´ã„Åó„Åæ„Åó„ÅüÔºÅ")
                                    st.info("üìã „É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†„Çø„Éñ„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü")
                                else:
                                    st.success("‚úÖ ÁΩ≤ÂêçÂÆå‰∫Ü")
                                st.rerun()
                            else:
                                st.warning("Êó¢„Å´ÁΩ≤ÂêçÊ∏à„Åø„Åß„Åô")
                else:
                    st.markdown("""
                    <div class="success-box">
                        <strong>‚úÖ „Åì„ÅÆ„Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„ÅØÊàêÁ´ã„Åó„Åæ„Åó„Åü</strong><br>
                        „É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†„Çø„Éñ„ÅßÊäïÁ•®„Åß„Åç„Åæ„Åô„ÄÇ
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("---")
    
    # „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„Çø„Éñ
    with tab_objects[3]:
        st.header("üîç „Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ")
        st.write("ÊäïÁ•®„Å´Èñ¢„Åó„Å¶Á¢∫Ë™ç„Åó„Åü„ÅÑÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        query = st.text_area("Ë≥™Âïè„ÇíÂÖ•Âäõ", 
                           placeholder="‰æã: Ê∂àË≤ªÁ®é„ÅÆÁèæÂú®„ÅÆÁ®éÁéá„ÅØÔºü", 
                           height=100)
        
        if st.button("„Éï„Ç°„ÇØ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å", type="primary"):
            if query:
                response = get_fact_check_response(query)
                
                # „Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
                db.save_fact_check(
                    st.session_state.user['id'],
                    query,
                    response['answer'],
                    response['sources']
                )
                
                st.markdown(f"""
                <div class="info-box">
                    <h4>üìù Ë≥™Âïè</h4>
                    <p>{query}</p>
                    
                    <h4>üí° ÂõûÁ≠î</h4>
                    <p>{response['answer']}</p>
                    
                    <h4>üìö ÊÉÖÂ†±Ê∫ê</h4>
                    <ul>
                        {''.join([f'<li>{source}</li>' for source in response['sources']])}
                    </ul>
                    
                    <p style="color: #6B7280; font-size: 0.875rem;">
                        ÂõûÁ≠îÊó•ÊôÇ: {datetime.now().strftime('%YÂπ¥%mÊúà%dÊó• %H:%M:%S')}
                    </p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.warning("Ë≥™Âïè„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
        
        # Â±•Ê≠¥Ë°®Á§∫
        history = db.get_fact_check_history(st.session_state.user['id'])
        if history:
            st.markdown("---")
            st.subheader("üìã ÈÅéÂéª„ÅÆË≥™ÂïèÂ±•Ê≠¥")
            for item in history:
                with st.expander(f"{item['timestamp'].strftime('%Y/%m/%d %H:%M')} - {item['query'][:50]}..."):
                    st.write(f"**Ë≥™Âïè:** {item['query']}")
                    st.write(f"**ÂõûÁ≠î:** {item['answer']}")
                    st.write(f"**ÊÉÖÂ†±Ê∫ê:** {', '.join(item['sources'])}")
    
    # ÁÆ°ÁêÜËÄÖ„Çø„Éñ
    if st.session_state.user['is_admin'] and len(tab_objects) > 4:
        with tab_objects[4]:
            st.header("‚öôÔ∏è ÁÆ°ÁêÜËÄÖË®≠ÂÆö")
            
            st.markdown("""
            <div class="warning-box">
                <strong>‚ö†Ô∏è ÁÆ°ÁêÜËÄÖÂ∞ÇÁî®„Éö„Éº„Ç∏</strong><br>
                „Åì„ÅÆÁîªÈù¢„ÅØÁÆ°ÁêÜËÄÖ„ÅÆ„Åø„Ç¢„ÇØ„Çª„ÇπÂèØËÉΩ„Åß„Åô„ÄÇË®≠ÂÆö„ÅÆÂ§âÊõ¥„ÅØÂÖ®„Å¶„ÅÆ„É¶„Éº„Ç∂„Éº„Å´ÂΩ±Èüø„Åó„Åæ„Åô„ÄÇ
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("---")
            
            # „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„ÉñË®≠ÂÆö
            st.subheader("üìù „Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„ÉñË®≠ÂÆö")
            
            st.write("„Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ„ÅåÊàêÁ´ã„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å„Å™ÁΩ≤ÂêçÊï∞„ÇíË®≠ÂÆö„Åó„Åæ„Åô")
            st.caption("„ÉÜ„Çπ„ÉàÁî®„Å´„ÅØÂ∞ëÊï∞Ôºà‰æã: 3-5‰∫∫Ôºâ„ÄÅÊú¨Áï™Áí∞Â¢É„Åß„ÅØÂÆüÈöõ„ÅÆ‰∫∫Êï∞„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
            
            current_required = db.get_setting('required_signatures', 10000)
            
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                if st.button("„ÉÜ„Çπ„Éà: 3‰∫∫", use_container_width=True):
                    db.set_setting('required_signatures', 3)
                    st.success("ÂøÖË¶ÅÁΩ≤ÂêçÊï∞„Çí3„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü")
                    st.rerun()
            
            with col2:
                if st.button("„Éá„É¢: 10‰∫∫", use_container_width=True):
                    db.set_setting('required_signatures', 10)
                    st.success("ÂøÖË¶ÅÁΩ≤ÂêçÊï∞„Çí10„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü")
                    st.rerun()
            
            with col3:
                if st.button("Â∞èË¶èÊ®°: 100‰∫∫", use_container_width=True):
                    db.set_setting('required_signatures', 100)
                    st.success("ÂøÖË¶ÅÁΩ≤ÂêçÊï∞„Çí100„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü")
                    st.rerun()
            
            with col4:
                if st.button("Êú¨Áï™: 10,000‰∫∫", use_container_width=True):
                    db.set_setting('required_signatures', 10000)
                    st.success("ÂøÖË¶ÅÁΩ≤ÂêçÊï∞„Çí10,000„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü")
                    st.rerun()
            
            custom_num = st.number_input("„Ç´„Çπ„Çø„É†Ë®≠ÂÆö", 
                                        min_value=1, 
                                        value=current_required,
                                        step=1)
            
            if st.button("„Ç´„Çπ„Çø„É†ÂÄ§„ÇíÈÅ©Áî®", type="primary"):
                db.set_setting('required_signatures', custom_num)
                st.success(f"ÂøÖË¶ÅÁΩ≤ÂêçÊï∞„Çí{custom_num}„Å´Ë®≠ÂÆö„Åó„Åæ„Åó„Åü")
                st.rerun()
            
            st.info(f"**ÁèæÂú®„ÅÆË®≠ÂÆö:** {current_required} ÁΩ≤Âêç")
            
            st.markdown("---")
            
            # Áµ±Ë®àÊÉÖÂ†±
            st.subheader("üìä Áµ±Ë®àÊÉÖÂ†±")
            
            stats = db.get_statistics()
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("„É¨„Éï„Ç°„É¨„É≥„ÉÄ„É†", stats['referendum'])
            
            with col2:
                st.metric("ÊãíÂê¶Ê®©ÊäïÁ•®", stats['veto'])
            
            with col3:
                st.metric("„Ç§„Éã„Ç∑„Ç¢„ÉÜ„Ç£„Éñ", stats['initiatives'])
            
            st.markdown("---")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("ÁΩ≤ÂêçÂãüÈõÜ‰∏≠", stats['collecting'])
            
            with col2:
                st.metric("ÊàêÁ´ãÊ∏à„Åø", stats['qualified'])
            
            st.markdown("---")
            
            # „Éá„Éº„Çø„Éô„Éº„ÇπÊÉÖÂ†±
            st.subheader("üíæ „Éá„Éº„Çø„Éô„Éº„ÇπÊÉÖÂ†±")
            
            db_file = Path("referendum_data.db")
            if db_file.exists():
                file_size = db_file.stat().st_size / 1024  # KB
                st.info(f"„Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫: {file_size:.2f} KB")
            
            st.caption("„Éá„Éº„Çø„ÅØSQLite„Éá„Éº„Çø„Éô„Éº„Çπ„Å´Ê∞∏Á∂öÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô")
            
            st.markdown("---")
            
            # OAuthË®≠ÂÆöÊÉÖÂ†±
            st.subheader("üîê OAuth 2.0 Ë®≠ÂÆö")
            
            st.markdown("""
            <div class="info-box">
                <h4>Google OAuth 2.0„ÅÆË®≠ÂÆöÊâãÈ†Ü</h4>
                <ol>
                    <li><strong>Google Cloud Console</strong>„Å´„Ç¢„ÇØ„Çª„Çπ
                        <ul>
                            <li>https://console.cloud.google.com/</li>
                        </ul>
                    </li>
                    <li><strong>„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê</strong>
                        <ul>
                            <li>Êñ∞„Åó„ÅÑ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê„Åæ„Åü„ÅØÊó¢Â≠ò„ÅÆ„ÇÇ„ÅÆ„ÇíÈÅ∏Êäû</li>
                        </ul>
                    </li>
                    <li><strong>OAuthÂêåÊÑèÁîªÈù¢„ÇíË®≠ÂÆö</strong>
                        <ul>
                            <li>„ÄåAPI„Å®„Çµ„Éº„Éì„Çπ„Äç‚Üí„ÄåOAuthÂêåÊÑèÁîªÈù¢„Äç</li>
                            <li>„É¶„Éº„Ç∂„Éº„Çø„Ç§„Éó„ÇíÈÅ∏ÊäûÔºàÂ§ñÈÉ®/ÂÜÖÈÉ®Ôºâ</li>
                            <li>„Ç¢„Éó„É™ÊÉÖÂ†±„ÇíÂÖ•Âäõ</li>
                        </ul>
                    </li>
                    <li><strong>Ë™çË®ºÊÉÖÂ†±„Çí‰ΩúÊàê</strong>
                        <ul>
                            <li>„ÄåË™çË®ºÊÉÖÂ†±„Äç‚Üí„ÄåË™çË®ºÊÉÖÂ†±„Çí‰ΩúÊàê„Äç‚Üí„ÄåOAuth„ÇØ„É©„Ç§„Ç¢„É≥„ÉàID„Äç</li>
                            <li>„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çø„Ç§„Éó: Web„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥</li>
                            <li>ÊâøË™çÊ∏à„Åø„ÅÆ„É™„ÉÄ„Ç§„É¨„ÇØ„ÉàURI„ÇíËøΩÂä†</li>
                        </ul>
                    </li>
                    <li><strong>Streamlit Secrets„Å´Ë®≠ÂÆö</strong>
                        <ul>
                            <li>„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„Å´<code>.streamlit/secrets.toml</code>„Çí‰ΩúÊàê</li>
                            <li>‰ª•‰∏ã„ÇíË®òËø∞Ôºö</li>
                        </ul>
                    </li>
                </ol>
                
                <pre style="background: #1f2937; color: #f3f4f6; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
[google_oauth]
client_id = "your-client-id.apps.googleusercontent.com"
client_secret = "your-client-secret"

[admin]
emails = ["admin1@example.com", "admin2@example.com"]
                </pre>
                
                <h4 style="margin-top: 1.5rem;">ÂøÖË¶Å„Å™Python„Éë„ÉÉ„Ç±„Éº„Ç∏</h4>
                <pre style="background: #1f2937; color: #f3f4f6; padding: 1rem; border-radius: 0.5rem;">
google-auth>=2.23.0
google-auth-oauthlib>=1.1.0
google-auth-httplib2>=0.1.1
                </pre>
            </div>
            """, unsafe_allow_html=True)